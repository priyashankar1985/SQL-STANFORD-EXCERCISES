Students at your hometown high school have decided to organize their social network using databases. So far, they have collected information about sixteen students in four grades, 9-12. Here's the schema: 

Highschooler ( ID, name, grade ) 
English: There is a high school student with unique ID and a given first name in a certain grade. 

Friend ( ID1, ID2 ) 
English: The student with ID1 is friends with the student with ID2. Friendship is mutual, so if (123, 456) is in the Friend table, so is (456, 123). 

Likes ( ID1, ID2 ) 
English: The student with ID1 likes the student with ID2. Liking someone is not necessarily mutual, so if (123, 456) is in the Likes table, there is no guarantee that (456, 123) is also present. 

Your queries will run over a small data set conforming to the schema. View the database. (You can also download the schema and data.) 
------------------------------------------------------------------------------------------------------------------------------------------
For every situation where student A likes student B, but student B likes a different student C, return the names and grades of A, B, and C. 

SELECT H1.NAME,H1.GRADE,H2.NAME,H2.GRADE,H3.NAME,H3.GRADE
FROM LIKES L1, LIKES L2,HIGHSCHOOLER H1,HIGHSCHOOLER H2,HIGHSCHOOLER H3
WHERE L2.ID1=L1.ID2 AND L2.ID2!=L1.ID1 AND H1.ID=L1.ID1 AND H2.ID=L2.ID1 AND H3.ID=L2.ID2
-------------------------------------------------------------------------------------------------------------------------------------------
Find those students for whom all of their friends are in different grades from themselves. Return the students' names and grades. 

SELECT name, grade
FROM Highschooler H1
WHERE grade NOT IN (
  SELECT H2.grade
  FROM Friend, Highschooler H2
  WHERE H1.ID = Friend.ID1 AND H2.ID = Friend.ID2
);
------------------------------------------------------------------------------------------------------------------------------------------
What is the average number of friends per student? (Your result should be just one number.) 

SELECT AVG(COUN) FROM
(SELECT ID1,COUNT(ID2) AS COUN
FROM FRIEND
GROUP BY ID1) H1
------------------------------------------------------------------------------------------------------------------------------------------
Find the number of students who are either friends with Cassandra or are friends of friends of Cassandra. Do not count Cassandra, even though technically she is a friend of a friend. 

SELECT R1.SUM1+R2.SUM2 FROM 
(SELECT COUNT(F1.ID2) AS SUM1
FROM FRIEND F1,Highschooler
WHERE F1.ID1=ID AND NAME="Cassandra") R1,
(SELECT COUNT(F2.ID2) AS SUM2
FROM FRIEND F2,FRIEND F1,HIGHSCHOOLER
WHERE F2.ID1=F1.ID2 AND F1.ID1=ID AND NAME="Cassandra" AND F1.id2 != f1.id1 and f2.id2 != f1.id1) R2
-------------------------------------------------------------------------------------------------------------------------------------------
Find the name and grade of the student(s) with the greatest number of friends. 

SELECT NAME ,GRADE 
FROM HIGHSCHOOLER INNER JOIN FRIEND ON ID=ID1
GROUP BY ID1
HAVING COUNT(ID2) = (SELECT MAX(count) FROM (SELECT COUNT(*) AS count FROM FRIEND GROUP BY ID1)) 
---------------------------------------------------------------------------------------------------------------------------------------
