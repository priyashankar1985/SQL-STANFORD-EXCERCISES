Highschooler ( ID, name, grade ) 
English: There is a high school student with unique ID and a given first name in a certain grade. 

Friend ( ID1, ID2 ) 
English: The student with ID1 is friends with the student with ID2. Friendship is mutual, so if (123, 456) is in the Friend table, so is (456, 123). 

Likes ( ID1, ID2 ) 
English: The student with ID1 likes the student with ID2. Liking someone is not necessarily mutual, so if (123, 456) is in the Likes table, there is no guarantee that (456, 123) is also present. 

Your queries will run over a small data set conforming to the schema. View the database. (You can also download the schema and data.) 
----------------------------------------------------------------------------------------------------------------------------------------
Find the names of all students who are friends with someone named Gabriel. 

SELECT NAME FROM HIGHSCHOOLER WHERE ID IN (SELECT ID1 FROM HIGHSCHOOLER H,FRIEND WHERE H.NAME='Gabriel' AND ID2=H.ID)  
------------------------------------------------------------------------------------------------------------------------------------------
For every student who likes someone 2 or more grades younger than themselves, return that student's name and grade, and the name and grade of the student they like. 

SELECT H1.name, H1.grade, H2.name, H2.grade
FROM Highschooler H1
INNER JOIN Likes ON H1.ID = Likes.ID1
INNER JOIN Highschooler H2 ON H2.ID = Likes.ID2
WHERE (H1.grade - H2.grade) >= 2;
------------------------------------------------------------------------------------------------------------------------------------------
For every pair of students who both like each other, return the name and grade of both students. Include each pair only once, with the two names in alphabetical order. 

SELECT H1.name, H1.grade, H2.name, H2.grade
FROM Highschooler H1, HIGHSCHOOLER H2,LIKES L1,LIKES L2 
WHERE H1.ID = L1.ID1 and H2.ID = L1.ID2
AND H2.ID = L2.ID1 AND H1.ID = L2.ID2 AND H1.NAME<H2.NAME
ORDER BY H1.NAME,H2.NAME
------------------------------------------------------------------------------------------------------------------------------------------
Find all students who do not appear in the Likes table (as a student who likes or is liked) and return their names and grades. Sort by grade, then by name within each grade. 

SELECT DISTINCT NAME,GRADE 
FROM HIGHSCHOOLER,LIKES
WHERE ID NOT IN ( SELECT DISTINCT ID1 FROM LIKES UNION SELECT DISTINCT ID2 FROM LIKES)
ORDER BY GRADE, NAME
------------------------------------------------------------------------------------------------------------------------------------------
For every situation where student A likes student B, but we have no information about whom B likes (that is, B does not appear as an ID1 in the Likes table), return A and B's names and grades. 

SELECT H1.NAME,H1.GRADE,H2.NAME,H2.GRADE
FROM HIGHSCHOOLER H1,HIGHSCHOOLER H2 ,LIKES
WHERE H1.ID=ID1 AND H2.ID=ID2 AND H2.ID NOT IN (SELECT ID1 FROM LIKES)
---------------------------------------------------------------------------------------------------------------------------------------
Find names and grades of students who only have friends in the same grade. Return the result sorted by grade, then by name within each grade. 

select name, grade from Highschooler
where ID not in (
  select ID1 from Highschooler H1, Friend, Highschooler H2
  where H1.ID = Friend.ID1 and Friend.ID2 = H2.ID and H1.grade <> H2.grade)
order by grade, name; 
--------------------------------------------------------------------------------------------------------------------------------------
For each student A who likes a student B where the two are not friends, find if they have a friend C in common (who can introduce them!). For all such trios, return the name and grade of A, B, and C. 

select distinct H1.name, H1.grade, H2.name, H2.grade, H3.name, H3.grade
from Highschooler H1, Likes, Highschooler H2, Highschooler H3, Friend F1, Friend F2
where H1.ID = Likes.ID1 and Likes.ID2 = H2.ID and
  H2.ID not in (select ID2 from Friend where ID1 = H1.ID) and
  H1.ID = F1.ID1 and F1.ID2 = H3.ID and
  H3.ID = F2.ID1 and F2.ID2 = H2.ID;
 ----- -------------------------------------------------------------------------------------------------------------------------------------------
Find the difference between the number of students in the school and the number of different first names. 

SELECT COUNT1.CT1-COUNT2.CT2
FROM
(SELECT COUNT(*) AS CT1 FROM HIGHSCHOOLER) AS COUNT1,
(SELECT COUNT(DISTINCT H1.NAME) AS CT2
FROM HIGHSCHOOLER H1, HIGHSCHOOLER H2
WHERE H1.ID != H2.ID AND H1.NAME!=H2.NAME) AS COUNT2
----------------------------------------------------------------------------------------------------------------------------------------
Find the name and grade of all students who are liked by more than one other student. 

SELECT NAME,GRADE
FROM LIKES,HIGHSCHOOLER WHERE ID=ID2
GROUP BY NAME
HAVING COUNT(ID2) > 1 
---------------------------------------------------------------------------------------------------------------------------------------
